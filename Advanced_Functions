-- Create and use an alias to shorten the following query that has multiple 
-- window functions. Name the alias account_year_window.

SELECT id,
       account_id,
       DATE_TRUNC('year',occurred_at) AS year,
       DENSE_RANK() OVER account_year_window AS dense_rank,
       total_amt_usd,
       SUM(total_amt_usd) OVER account_year_window AS sum_total_amt_usd,
       COUNT(total_amt_usd) OVER account_year_window AS count_total_amt_usd,
       AVG(total_amt_usd) OVER account_year_window AS avg_total_amt_usd,
       MIN(total_amt_usd) OVER account_year_window AS min_total_amt_usd,
       MAX(total_amt_usd) OVER account_year_window AS max_total_amt_usd
FROM orders
WINDOW account_year_window AS (PARTITION BY account_id ORDER BY DATE_TRUNC('year',occurred_at));

-- Imagine you're an analyst at Parch & Posey and you want to determine how the current order's total revenue 
-- ("total" meaning from sales of all types of paper) compares to the next order's total revenue.

SELECT occurred_at,
       total_amt_usd,
       LEAD(total_amt_usd) OVER (ORDER BY occurred_at) AS lead,
       LEAD(total_amt_usd) OVER (ORDER BY occurred_at) - total_amt_usd AS lead_difference
FROM (
SELECT occurred_at,
       SUM(total_amt_usd) AS total_amt_usd
  FROM orders 
 GROUP BY 1
) sub;

-- Use the NTILE functionality to divide the accounts into 4 levels in terms of the amount of standard_qty for their orders.
-- Your resulting table should have the account_id, the occurred_at time for each order, the total amount of standard_qty paper purchased, 
-- and one of four levels in a standard_quartile column.

SELECT account_id, 
	   occurred_at, 
       standard_qty,
       NTILE(4) OVER (PARTITION BY account_id ORDER BY standard_qty) AS standard_quartile
FROM orders;

-- Use the NTILE functionality to divide the accounts into two levels in terms of the amount of gloss_qty for their orders.
-- Your resulting table should have the account_id, the occurred_at time for each order, 
-- the total amount of gloss_qty paper purchased, and one of two levels in a gloss_half column.

SELECT account_id, 
	   occurred_at, 
       gloss_qty,
       NTILE(2) OVER (PARTITION BY account_id ORDER BY gloss_qty) AS gloss_half
FROM orders;

-- Use the NTILE functionality to divide the orders for each account into 100 levels in terms of 
-- the amount of total_amt_usd for their orders. Your resulting table should have the account_id, 
-- the occurred_at time for each order, the total amount of total_amt_usd paper purchased, and one of 100 
-- levels in a total_percentile column.

SELECT account_id, 
	   occurred_at, 
       total_amt_usd,
       NTILE(100) OVER (PARTITION BY account_id ORDER BY total_amt_usd) AS gloss_half
FROM orders
ORDER BY 1 DESC